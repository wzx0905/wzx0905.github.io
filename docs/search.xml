<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>互联网原理</title>
    <url>/2022/08/47b2f661c6ea/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="互联网的运行过程"><a href="#互联网的运行过程" class="headerlink" title="互联网的运行过程"></a>互联网的运行过程</h3><p>开发人员将网页源文件上传到服务器进行存储，用户后期通过客户端（如浏览器软件）发送HTTP请求到服务器，服务器接收请求后进行响应，将存储的相关文件通过HTTP响应回传到用户本地客户端，最终通过客户端将网页文件进行渲染，显示出最终用户看到的网页效果。</p>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><ul>
<li>服务器（server），就是一种特殊的计算机，也包括处理器、硬盘、内存、系统总线等，但是由于需要提供更可靠的服务，因此在处理能力、稳定性、可靠性、安全性等方面要求较高。</li>
<li>作用：对于WEB来讲，用于存储开发人员上传的网页数据，且需要响应服务请求，并进行处理。</li>
<li>要求：对于网站服务器来说，为了让用户随时进行访问，必须24小时不间断工作。</li>
</ul>
<h3 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h3><p>目前绝大多数网站都采用的是云服务器（Elastic Compute Service, ECS)，云服务器是一种简单高效、安全可靠、处理能力可弹性伸缩的计算服务。其管理方式比物理服务器更简单高效。用户无需提前购买硬件，即可迅速创建或释放任意多台云服务器。</p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul>
<li>客户端（Client）也叫用户端，指的是普通用户使用的终端，客户端有多种形式，比如最常用的就是浏览器、app等，而web开发最主要的客户端形式还是浏览器。</li>
<li>浏览器(Browser)，是一种用户上网搜索、查看信息资源的应用程序。</li>
<li>功能：用于发送HTTP请求到服务器，接收服务器发回的HTTP响应，渲染HTML网页。</li>
</ul>
<h3 id="主流浏览器"><a href="#主流浏览器" class="headerlink" title="主流浏览器"></a>主流浏览器</h3><p>主流的Web页面浏览器有：微软的IE和Microsoft Edge、Mozilla的Firefox、苹果公司的Safari、Google的Chrome及Opera软件公司的Opera。</p>
<h3 id="主流浏览器内核"><a href="#主流浏览器内核" class="headerlink" title="主流浏览器内核"></a>主流浏览器内核</h3><p>因为不同浏览器使用内核及所支持的HTML等网页语言标准不同，对网页的渲染效果会有差异。</p>
<table>
<thead>
<tr>
<th align="center">浏览器</th>
<th align="center">渲染引擎（内核）</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IE/Edge</td>
<td align="center">Trident</td>
<td align="center">IE内核</td>
</tr>
<tr>
<td align="center">FireFox</td>
<td align="center">Gecko</td>
<td align="center">Firefox内核</td>
</tr>
<tr>
<td align="center">Safari</td>
<td align="center">Webkit</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Chrome</td>
<td align="center">Webkit→Blink</td>
<td align="center">统称为Chromium内核或Chrome内核</td>
</tr>
<tr>
<td align="center">Opera</td>
<td align="center">Presto→Webkit→Blink</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>推荐：使用Chrome浏览器。（渲染效果好、市场占有率高、自带开发者调试工具）。</p>
<h3 id="浏览器功能"><a href="#浏览器功能" class="headerlink" title="浏览器功能"></a>浏览器功能</h3><ul>
<li>发送HTTP请求，发送的方式是在浏览器地址栏输入对应网址，或者点击超级链接。</li>
<li>接收服务器发回的HTTP响应，服务器会发回一个HTML给浏览器。</li>
<li>将接收到的HTML进行解析并显示。</li>
</ul>
<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>Hypertext Transfer Protocol：超文本传输协议。是客户端浏览器或其他程序与WEB服务器之间的应用层通信协议。</p>
<h4 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h4><ul>
<li>request，浏览器根据网址向对应的服务器发送请求。</li>
<li>发起请求的方法：在浏览器地址栏中输入网址，或者点击网址链接。</li>
<li>HTML页面解析过程中，会发出多个http请求，包含网页的图片、视频、音频等文件请求。</li>
</ul>
<h4 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h4><ul>
<li>response，服务器根据请求响应一个HTML文件，将HTML传输给客户端，在浏览器中进行HTML网页的渲染。</li>
</ul>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>纯文本格式</title>
    <url>/2022/08/036c8e9a5c83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>纯文本格式，就是没有任何文本修饰的，没有任何粗体，下划线，斜体，图形，符号或特殊字符及特殊打印格式的文本，只保存文本，不保存其格式设置。</p>
<h3 id="格式对比"><a href="#格式对比" class="headerlink" title="格式对比"></a>格式对比</h3><h4 id="纯文本格式"><a href="#纯文本格式" class="headerlink" title="纯文本格式"></a>纯文本格式</h4><ul>
<li>最常见的是.txt文件。</li>
<li>只能保存文本，不保存其他的格式或非文本内容。</li>
<li>文件小，有利于网络传输。</li>
<li>可以通过直接更改扩展名的方式更改保存格式。</li>
<li>可以使用任意的纯文本编辑器进行查看和编辑。</li>
<li>html、css、js文件都是纯文本格式文件。</li>
</ul>
<h4 id="富文本格式"><a href="#富文本格式" class="headerlink" title="富文本格式"></a>富文本格式</h4><ul>
<li>最常见的是.rtf文件，类似.doc文件。</li>
<li>内部可以保存文本的样式、图片等。</li>
</ul>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>网页的认识</title>
    <url>/2022/08/6b01bb54f24e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="网页的制作"><a href="#网页的制作" class="headerlink" title="网页的制作"></a>网页的制作</h3><ul>
<li>HTML就是用来制作网页文件的。</li>
<li>浏览器查看的网页都是.html或.htm文件。</li>
<li>HTML叫做超文本标记语言(Hypertext Markup Language)，用于搭建网页的结构。</li>
</ul>
<h3 id="网页的组成"><a href="#网页的组成" class="headerlink" title="网页的组成"></a>网页的组成</h3><ul>
<li>前端三层：HTML(结构层)、CSS(样式层)、JavaScript(行为层)。</li>
<li>其他多媒体内容：图片、视频、音频、超级链接等。</li>
<li>所有的网页文件都是真实的、物理存在的文件。</li>
</ul>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS概述</title>
    <url>/2022/08/b98f9c4f4f02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h3><p>从HTML被发明开始，样式就以各种形式存在，最初的HTML只包含很少的显示属性。</p>
<p>随着HTML的成长，为了满足页面设计者的要求，HTML添加了很多显示功能，例如文本格式化标签。</p>
<p>但是随着这些功能的增加，HTML变的越来越杂乱，而且HTML页面也越来越臃肿。</p>
<p>于是CSS便诞生了。</p>
<h3 id="发展过程"><a href="#发展过程" class="headerlink" title="发展过程"></a>发展过程</h3><table>
<thead>
<tr>
<th>版本</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>CSS1</td>
<td>1995年12月，层叠样式表的第一份正式标准（Cascading style Sheets Level 1）完成，成为 w3c 的推荐标准。</td>
</tr>
<tr>
<td>CSS2</td>
<td>1997年初，W3C 组织负责 CSS 的工作组开始讨论第一版中没有涉及到的问题。其讨论结果组成了1998年5月出版的 CSS 规范第二版。</td>
</tr>
<tr>
<td>CSS3</td>
<td>CSS3 是 CSS 层叠样式表技术的升级版本，于1999年开始制订，2001年5月23日 W3C 完成了 CSS3 的工作草案，主要包括盒子模型、列表模块、超链接方式、语言模块、背景和边框、文字特效、多栏布局等模块 。</td>
</tr>
</tbody></table>
<h3 id="CSS-概念"><a href="#CSS-概念" class="headerlink" title="CSS 概念"></a>CSS 概念</h3><p>css 全称 cascading style sheets，层叠式样式表，是一种用来表现 HTML 的文件样式的计算机语言。</p>
<p>作用：静态地修饰网页，并且可以配合各种脚本语言动态地对网页各元素进行格式化。</p>
<p>CSS 的出现，实现了网页的结构和样式分离，拯救了混乱的 HTML，更加拯救了我们 web 开发者。</p>
<p>CSS 可以说是网页的美容师， 让我们的网页更加美观。</p>
<h3 id="前端三层技术"><a href="#前端三层技术" class="headerlink" title="前端三层技术"></a>前端三层技术</h3><p><strong>html</strong></p>
<ul>
<li>结构层</li>
<li>从语义的角度搭建网页结构</li>
</ul>
<p><strong>css</strong></p>
<ul>
<li>样式层</li>
<li>从美观的角度描述页面样式</li>
</ul>
<p><strong>JavaScript</strong></p>
<ul>
<li>行为层</li>
<li>从交互的角度描述页面行为</li>
</ul>
<h3 id="CSS-的组成"><a href="#CSS-的组成" class="headerlink" title="CSS 的组成"></a>CSS 的组成</h3><p>层叠式：css 中贯穿始终的加载特性</p>
<ul>
<li>层叠性</li>
<li>继承性</li>
</ul>
<p>样式：定义如何显示 HTML 元素</p>
<ul>
<li>文字文本</li>
<li>背景</li>
<li>盒模型</li>
<li>浮动</li>
<li>定位</li>
<li>其他</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>color</title>
    <url>/2022/08/cc2ac9154842/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>作用：给文字设置颜色。</p>
<p>属性名 k ：color</p>
<p>属性值 v ：颜色名、颜色值。</p>
<h3 id="颜色名"><a href="#颜色名" class="headerlink" title="颜色名"></a>颜色名</h3><p>颜色名就是使用颜色的英文单词进行表示。 </p>
<p>需要记忆一些最常用的颜色名：</p>
<table>
<thead>
<tr>
<th>颜色</th>
<th>色值</th>
<th>颜色</th>
<th>色值</th>
</tr>
</thead>
<tbody><tr>
<td>红色</td>
<td>red</td>
<td>黑色</td>
<td>black</td>
</tr>
<tr>
<td>橙色</td>
<td>orange</td>
<td>白色</td>
<td>white</td>
</tr>
<tr>
<td>黄色</td>
<td>yellow</td>
<td>金色</td>
<td>gold</td>
</tr>
<tr>
<td>绿色</td>
<td>green</td>
<td>粉色</td>
<td>pink</td>
</tr>
<tr>
<td>青色</td>
<td>cyan</td>
<td>浅黄色</td>
<td>lightyellow</td>
</tr>
<tr>
<td>蓝色</td>
<td>blue</td>
<td>黄绿色</td>
<td>yellowgreen</td>
</tr>
<tr>
<td>紫色</td>
<td>purple</td>
<td>天蓝色</td>
<td>skyblue</td>
</tr>
</tbody></table>
<p>更多的颜色名可以通过查询手册得到</p>
<h3 id="颜色值"><a href="#颜色值" class="headerlink" title="颜色值"></a>颜色值</h3><p>颜色值指使用具体颜色的数值表示。</p>
<p>包括： rgb 模式和十六进制模式写法。</p>
<h4 id="rgb-模式"><a href="#rgb-模式" class="headerlink" title="rgb 模式"></a>rgb 模式</h4><p>rgb 模式：是根据红绿蓝三原色进行混合而成的颜色模式。</p>
<p>每个原色的取值范围是0-255，一共256个数值。三个原色共能混合成1677多万种颜色。</p>
<p>书写方法：rgb(红,绿,蓝) </p>
<p>常用颜色的 rgb 色值： </p>
<table>
<thead>
<tr>
<th>颜色</th>
<th>色值</th>
<th>颜色</th>
<th>色值</th>
</tr>
</thead>
<tbody><tr>
<td>红色</td>
<td>rgb(255,0,0)</td>
<td>黑色</td>
<td>rgb(0,0,0)</td>
</tr>
<tr>
<td>绿色</td>
<td>rgb(0,255,0)</td>
<td>白色</td>
<td>rgb(255,255,255)</td>
</tr>
<tr>
<td>蓝色</td>
<td>rgb(0,0,255)</td>
<td>灰色</td>
<td>rgb(128,128,128)</td>
</tr>
</tbody></table>
<h4 id="十六进制模式"><a href="#十六进制模式" class="headerlink" title="十六进制模式"></a>十六进制模式</h4><p>十六进制模式：是 rgb 模式的一种简化写法，使用十六进制的数字字符去替换十进制的 0-255 的数字。</p>
<p>十六进制：逢十六进一，每个数位上只能出现 0-9，a-f 之间的字符。 </p>
<p>书写为颜色值时，红、绿、蓝每个色值都要使用两位数的十六进制进行替换。</p>
<ul>
<li>0→00 </li>
<li>255→ff </li>
</ul>
<p>书写方式：使用 # 开头，后面连续书写红、绿、蓝三个颜色的十六进制的两位数值。</p>
<p>常用颜色的十六进制色值：</p>
<table>
<thead>
<tr>
<th>颜色</th>
<th>色值</th>
<th>颜色</th>
<th>色值</th>
</tr>
</thead>
<tbody><tr>
<td>红色</td>
<td>#ff0000</td>
<td>黑色</td>
<td>#000000</td>
</tr>
<tr>
<td>绿色</td>
<td>#00ff00</td>
<td>白色</td>
<td>#ffffff</td>
</tr>
<tr>
<td>蓝色</td>
<td>#0000ff</td>
<td>灰色</td>
<td>#808080</td>
</tr>
</tbody></table>
<p>十六进制颜色值简写模式：如果红、绿、蓝三个原色的色值每一个都是由重叠的数字组成，可以将重叠的数字简化成一个进行书写。</p>
<ul>
<li>红色#f00 </li>
<li>绿色#0f0 </li>
<li>蓝色#00f </li>
<li>类似 #808080 是不能进行简化的。</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>样式</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>font-family</title>
    <url>/2022/08/814842f7f206/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>作用：定义元素内文字的字体。</p>
<p>属性名 k ：font-family，字体属于 font 综合属性的一个单一属性。</p>
<p>属性值 v ：字体名称，必须包裹在一对引号中，属性值可以有多个，值之间用逗号分隔。</p>
<h3 id="常用字体"><a href="#常用字体" class="headerlink" title="常用字体"></a>常用字体</h3><h4 id="常用的中文字体"><a href="#常用的中文字体" class="headerlink" title="常用的中文字体"></a>常用的中文字体</h4><p>宋体 SimSun</p>
<p>微软雅黑 Microsoft Yahei </p>
<h4 id="常用的英文字体"><a href="#常用的英文字体" class="headerlink" title="常用的英文字体"></a>常用的英文字体</h4><p>Arial</p>
<p>consolas</p>
<p>如果不设置字体属性，不同的浏览器有自己的默认字体。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>font-family 可以设置多个字体名称，在实际加载时只会选择一种加载，选择的依据是按书写顺序进行，如果浏览器不支持第一个字体，则会尝试下一个，直到找到第一个支持的字体。</p>
<p>浏览器中加载的字体是用户机器中自带的，如果用户的电脑中没有设置的字体则加载失败，需要查找下一个，因此，必须在最后设置一个所有机器都具备的通用字体作为后路。</p>
<p>中文字体中一般带有英文可以加载的字体效果，为了避免对英文字的字体影响，建议将英文字体写在属性值最前面。</p>
<h4 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h4><p>首选字体需要根据设计图确定，最后需要设置备用字体。</p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>样式</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>font-size</title>
    <url>/2022/08/34803298320c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>作用：设置文字的大小。</p>
<p>属性名 k ：font-size，字号属于 font 综合属性的一个单一属性。 </p>
<p>属性值 v ：可以使用相对长度单位，也可以使用绝对长度单位。推荐使用相对长度单位。</p>
<h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><table>
<thead>
<tr>
<th>相对长度单位</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>px</td>
<td>像素值，最常使用的单位</td>
</tr>
<tr>
<td>em</td>
<td>倍数，继承自祖先元素设置的字号的倍数</td>
</tr>
<tr>
<td>%</td>
<td>百分比，继承自祖先元素设置的字号的百分比</td>
</tr>
<tr>
<td><strong>绝对长度单位</strong></td>
<td><strong>说明</strong></td>
</tr>
<tr>
<td>in</td>
<td>英寸</td>
</tr>
<tr>
<td>cm</td>
<td>厘米</td>
</tr>
<tr>
<td>mm</td>
<td>毫米</td>
</tr>
<tr>
<td>pt</td>
<td>点</td>
</tr>
</tbody></table>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果 HTML 中不设置字号，不同的浏览器有自己默认的加载字号，比如 chrome、IE，默认显示字号为 16px。</p>
<p>不同的浏览器也有自己最小加载显示字号，如果设置的字号低于最小字号，都以最小字号加载，0除外。chrome 浏览器最小加载显示字号为8px，IE 浏览器最小可以支持1px的字号。</p>
<h4 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h4><p>网页中最小设置字号必须是12px，如果低于12px会出现兼容问题。现在网页中普遍使用14px+。</p>
<p>尽量使用12px、14px、16px等偶数的数字字号，ie6 等老式浏览器支持奇数会有 bug。</p>
<p>实际工作中的字号，需要以设计图为准。</p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>样式</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS层叠式</title>
    <url>/2022/08/3c25b60647d2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>CSS 的概念中，除了前面提到的样式外，还有一个重要的概念就是层叠式，层叠式是贯穿整个css的一个性质，包含继承性和层叠性。 </p>
<h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>如果一个标签没有设置过一些样式，它的某个祖先级曾经设置过，在浏览器中该标签也加载了这些样式，这些样式都是从祖先级继承而来，这种现象就是继承性。</p>
<p>能够被继承的样式是所有的<strong>文字相关样式属性</strong>，其他的属性都不能被继承。</p>
<p>继承性是一个很好的性质，可以将页面中出现最多的文字样式设置给一个较大的祖先级标签比如 body，后期所有的后代标签都可以从 body进行继承。</p>
<h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>思考问题：同一个标签可以被多个选择器选中，如果选择器后面设置了相同的样式属性，标签最终该加载哪个？或者，在继承性中，如果多个祖先都设置了相同的文字样式，后代中该继承哪个祖先级的？</p>
<p>解决方法：就是使用层叠性去解决冲突。多个选择器在进行对比的过程中，最终只有一个属性会成功加载，它会层叠、覆盖掉其他的属性。</p>
<p>判断最终胜出的属性是谁，需要依赖判断<strong>优先级</strong>。</p>
<h4 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h4><p><strong>选中目标标签</strong></p>
<ul>
<li><strong>第一步：比较多个选择器的权重，权重高的层叠权重低的。</strong></li>
<li>基础选择器的权重：根据选择范围，范围越大权重越小，* &lt; 标签选择器 &lt; 类选择器 &lt; id 选择器。</li>
<li>高级选择器权重比较方法：依次比较组成高级选择器的 id 的个数，类的个数，标签的个数，如果前面能够比较出大小就不再比较后面，如果前面相等就往后比较，直到比较出大小。</li>
<li>比较顺序：( id 个数, 类的个数, 标签的个数 ) </li>
<li><strong>第二步：如果选择器权重都相同，需要比较 CSS 中代码的书写顺序，后写的层叠先写的。</strong></li>
</ul>
<p><strong>选中目标标签的组先级</strong></p>
<ul>
<li>如果选择器选中的是祖先元素，文字的样式可以被继承。</li>
<li>第一步：比较就近原则，比较选择器选中的祖先级在 HTML 结构中距离目标标签的远近，近的层叠远的。</li>
<li>第二步：如果选中的祖先级距离目标一样近（同一个祖先级），比较选择器权重，权重大的层叠小的。</li>
<li>第三步：如果距离一样近，权重也相同，最后比较 CSS 中的书写顺序，后面的层叠前面的。</li>
</ul>
<p><strong>!important 关键字</strong></p>
<ul>
<li>如果在比较选择器权重的过程中，遇见一个 !important 关键字，可以将某条 CSS 样式属性的权重提升到最大。 </li>
<li>书写位置：在某个css属性的属性值后面空格加 !important 。</li>
<li>注意：<ul>
<li>就近原则中，不需要比较选择器权重，所有 important 会失效。</li>
<li>important 不能提升选择器的权重，只能提升某条属性的权重到最大。</li>
</ul>
</li>
</ul>
<p><strong>行内式权重</strong></p>
<ul>
<li> 行内式样式与内嵌式或外链式样式比较权重时，行内式的权重最高。</li>
<li> 但是，与 <code>!important</code> 关键字相比权重要低。</li>
</ul>
<p><strong>总结</strong><img src="https://pic.imgdb.cn/item/616581512ab3f51d91348fd8.png"></p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS样式表</title>
    <url>/2022/08/5be24978e588/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="CSS-规则"><a href="#CSS-规则" class="headerlink" title="CSS 规则"></a>CSS 规则</h3><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明</p>
<h3 id="书写位置"><a href="#书写位置" class="headerlink" title="书写位置"></a>书写位置</h3><p>css 的代码根据书写位置不同分为四种书写方式：内联式、内嵌式、外联式、导入式。</p>
<h4 id="内联式"><a href="#内联式" class="headerlink" title="内联式"></a>内联式</h4><p>内联式，也被习惯叫做行内式。</p>
<p>书写位置：在 HTML 标签之上的 style 属性中书写 css 样式。</p>
<p>所有的 css 样式属性总体组成标签的 style 属性的属性值。</p>
<p><strong>缺点</strong></p>
<p>内联式必须写在标签上，没有完全脱离 HTML 标签。</p>
<p>css 样式代码让标签结构繁重，不利于 HTML 结构的解读。 </p>
<p>个内联式的 css 代码，只能给一个标签使用，如果多个标签有相同的样式，同样的 css 代码需要书写多次，增加代码量。</p>
<p>因此，实际工作中不会使用内联式（行内式）编写 css 代码。 </p>
<h4 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h4><p>书写位置：在 HTML 文件中，head 标签内部有一个 style 标签。 style 标签书写在title 标签后面，所有 css 代码书写在 style 标签内部 。</p>
<p>style 标签有一个标签属性叫做 type，属性值是 ”text/css”。</p>
<p><strong>优点</strong></p>
<p>实现了结构和样式的初步分离，css 只负责样式，HTML 负责结构。</p>
<p>多个标签可以利用一段代码设置相同的样式，节省代码量。</p>
<p><strong>缺点</strong></p>
<p>结构和样式并没有完全分离，代码依旧书写在 HTML 文件的style标签内部。</p>
<p>css 样式只能给一个 HTML 文件使用，不能够被多个 HTML 文件同时利用。</p>
<p>在 HTML 中如果 css 代码太多，会造成文件头重脚轻。</p>
<h4 id="外联式"><a href="#外联式" class="headerlink" title="外联式"></a>外联式</h4><p>外联式 CSS，也可以叫做外链式 CSS、外部 CSS。</p>
<p>书写位置：在一个单独的扩展名为 .css 的文件中。</p>
<p>书写语法：内部代码与内嵌式样式表中 style 标签内部的代码一样的。需要通过选择器去选中标签，添加对应的样式。</p>
<p>注意：在 .css 文件中书写时，不需要再加 style 标签</p>
<p><strong>引用</strong></p>
<p>外联式样式表必须引入到 HTML 文件中，才能正常进行加载。 </p>
<p>引入方式：在 HTML 中的 head 标签内部使用 link 标签进行引入。</p>
<p>link 标签属性</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>rel</td>
<td>stylesheet</td>
<td>表示引入的外部文件与 HTML 之间的关系，样式表</td>
</tr>
<tr>
<td>href</td>
<td>css 文件路径</td>
<td>hypertext reference，超文本引用</td>
</tr>
<tr>
<td>type</td>
<td>text/css</td>
<td>表示加载时代码按照纯文本形式的 css 代码加载。HTML5 中可以省略 type 属性不写。</td>
</tr>
</tbody></table>
<p><strong>优点</strong></p>
<p>实现了 HTML 和 css 完全分离。</p>
<p>多个 HTML 文件可以共用一个 css 文件，便于提取公共 css，减少代码量。 </p>
<p>可以实现一个 css 变化，多个 HTML 页面同时变化，减少工作量。</p>
<p>一个 HTML 文件可以引入多个 css 文件，可以实现同一个页面中 css 代码分层。</p>
<h4 id="导入式"><a href="#导入式" class="headerlink" title="导入式"></a>导入式</h4><p>书写位置：在内嵌式样式表 style 标签内部，或者在外联式样式表内部，导入其他的外部的 .css 文件。</p>
<p>导入方式：利用一条 @import url(路径) 语句进行引入。 </p>
<p><strong>问题</strong></p>
<p>导入式样式表的作用与外联式样式表基本相同。</p>
<p>但是由于导入式在浏览器中加载时，会在 HTML 结构加载完毕后再进行编译，如果网速比较慢时，会导致网页出现没有 css 样式的效果，给用户的体验不好。</p>
<p>实际工作中，较少使用导入式，推荐使用外联式样式表。</p>
<h4 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h4><p>小型案例：可以使用内嵌式 CSS。</p>
<p>实际工作、大型网站项目：推荐使用外联式 CSS。</p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS样式规则</title>
    <url>/2022/08/d5e716173516/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="样式规则"><a href="#样式规则" class="headerlink" title="样式规则"></a>样式规则</h3><p><strong>以内嵌式样式表为例</strong></p>
<p>所有的 css 代码都必须书写在 head 标签内部的一对 style 标签内。</p>
<p>css 在给某个标签设置样式前，必须使用选择器先选中标签。</p>
<p>css 样式的属性，属性名和属性值的键值对写法为 k:v; 。 </p>
<p>给每个选择器添加的样式属性都必须写在一对大括号 {} 之内。</p>
<p>给一个标签添加的所有需要的样式，都要在 {} 内部一一罗列出来 </p>
<p><strong>注意事项</strong></p>
<p>分号必要性：每条属性后面的分号必须写，如果不写，会导致后面所有的代码加载错误。</p>
<p>css 中所有属性与属性之间对空格、换行、缩进不敏感。</p>
<h3 id="CSS-注释语法"><a href="#CSS-注释语法" class="headerlink" title="CSS 注释语法"></a>CSS 注释语法</h3><p>一个清晰易读的 CSS 代码，离不开 CSS 注释的合理添加。</p>
<p>语法格式：<code>/*中间部分为注释内容*/</code></p>
<p>vs code快捷键：ctrl+/ 。</p>
<h3 id="CSS-样式格式"><a href="#CSS-样式格式" class="headerlink" title="CSS 样式格式"></a>CSS 样式格式</h3><p>代码风格是实际开发中的书写方式，并非强制标准。</p>
<p>展开格式：开发过程使用，代码可读性强，便于调错。</p>
<p>紧凑格式：上传服务器时使用，减少不必要的空白字符，压缩文件大小，利于传输。</p>
<p><strong>英文大小写</strong></p>
<p>CSS 中的英文可以使用大写，也可以使用小写。</p>
<p>建议：css 中的选择器和样式属性名、属性值等都使用小写英文，特殊情况除外。</p>
<p><strong>空格规范</strong></p>
<p>选择器与大括号 {} 之间保留一个空格。</p>
<p>冒号后面，属性值前面，保留一个空格。 </p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>实体化属性</title>
    <url>/2022/08/72e487ce5fc9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>如果想在浏览器中具体看到一个盒子占有的实际位置，需要设置盒子可以实体化的三属性。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>px单位的数值</td>
<td>定义元素占有的宽度</td>
</tr>
<tr>
<td>height</td>
<td>px单位的数值</td>
<td>定义元素占有的高度</td>
</tr>
<tr>
<td>background-color</td>
<td>颜色名、颜色值</td>
<td>定义元素的背景颜色</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>HTML</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>基础选择器</title>
    <url>/2022/08/14363d7c18da/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h3><p>通过标签上的 id 属性去选择标签。</p>
<p>书写方式：#id 属性值 </p>
<p>选择范围：只能选中一个标签。</p>
<p>id 命名规则：必须以字母开头，后面可以有字母、数字、下划线、横线，严格区分大小写。每个 id 属性值必须是唯一的，不能与其他的 id 同名。</p>
<p>注意：如果希望多个标签设置相同的样式，使用id选择器的话，必须给这多个标签取不同的 id 名，分别选中设置。</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>缺点：id 选择器只能实现单选，不能帮我们完成多选的功能。</p>
<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>通过标签的 class 属性去选择标签。</p>
<p>书写方式：.class属性值。</p>
<p>选择范围：是页面中所有 class 属性值相同的标签。 </p>
<p>class 命名规则：必须以字母开头，后面可以有字母、数字、下划线、横线，严格区分大小写。class 属性值可以与其他的class相同。</p>
<h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>多个不同的标签，不区分标签类型，只要 class 属性值相同，都可以被同一个类选择器选中。</p>
<p>一个标签的 class 属性可以有多个属性值，值之间用空格分隔，每个属性值组成的选择器，都可以选中这一个标签，每个选择器后面的样式都会添加给同一个标签。 </p>
<p><strong>特殊应用</strong></p>
<p>原子类：在css中提前设置一些类名，每个类选择器后面只添加一条css样式属性，这些属性会在页面中常被使用，后期可以不需要多次书写属性，只要将对应的类名添加给需要的标签即可。</p>
<p><strong>优点</strong></p>
<p>通过一个类选择器进行多选，选中多个标签，添加公共样式。</p>
<p>个标签可以被多个类选择器选中，可以将所有样式进行分离，分别提取公共样式和单独样式，节省代码量。</p>
<p>实际工作中，通常我们有一个使用规律：类上样式(CSS)，id 上行为(JavaScript)。</p>
<h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><p>通过一个特殊符号选择页面内所有的标签。</p>
<p>书写方式：* </p>
<p>选择范围：包含 html标签在内的所有标签。</p>
<h4 id="特点和应用"><a href="#特点和应用" class="headerlink" title="特点和应用"></a>特点和应用</h4><p>优点：可以实现全选，简化书写。</p>
<p>缺点：通配符选择效率低，设置的部分公共样式不是所有标签都需要添加，如果使用通配符选择，会让不需要的标签也加载一次样式，导致浏览器多做无用的工作。</p>
<p>注意：实际上线的网站不允许使用 * 去清除默认内外边距。</p>
<p>不过普通的案例，代码量较少时，为了节省书写，可以使用通配符。</p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>选择器</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>标签选择器</title>
    <url>/2022/08/aae1eb06d820/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>通过标签名去选择标签元素。</p>
<p>书写方式：标签名。 </p>
<p>选择范围：选中的是HTML文件中所有的同名标签。</p>
<p>注意：标签选择器可以选择所有的同名标签，会忽视 HTML 元素的嵌套关系，不管嵌套多深，都能被选中。</p>
<p>优点：可以选中所有的同名标签，设置所有同名标签的公共样式。</p>
<p>缺点：只能实现全选，不能对局部的标签添加特殊样式。 </p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>选择器</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>选择器概念</title>
    <url>/2022/08/9b754f2a69c0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在内嵌式和外部css中，要想将 CSS 样式应用于特定的 HTML 元素，首先需要找到该目标元素，这时需要用到 CSS 中的选择器。 </p>
<p>选择器：选择要添加样式的 HTML 标签的一种方法、模式。 </p>
<p>css2.1 版本的七种选择器</p>
<p>基础选择器：标签选择器、id 选择器、类选择器、通配符选择器。</p>
<p>高级选择器：后代选择器、交集选择器、并集选择器。</p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>选择器</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>高级选择器</title>
    <url>/2022/08/addd58661361/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>由于基础选择器不能实现所有选择情况，后期在基础选择器的基础上衍生出了几种高级选择器。高级选择器的组成部分是基础选择器。</p>
<h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>通过标签之间存的嵌套关系（族谱关系）去选择元素，基本组成部分就是基础选择器。</p>
<p>后代选择器也叫包含选择器。</p>
<p>书写方式：空格表示后代，基础选择器中间使用空格分隔，空格前面的选择器选中的标签必须是后面选择器选中标签的祖先级。 </p>
<p>选择范围：通过后代选择器中前面的一系列基础选择器缩小选择范围，最终由最后一个选择器确定选中的标签。</p>
<p>注意：后代选择器必须满足所有的后代关系才能够被选中，后代关系不一定只能是父子关系。</p>
<p>优点：减少 class 属性的定义使用，选择效率更高。</p>
<h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><p>通过一个标签之上满足所有的基础选择器的需求去选择标签。</p>
<p>书写方式：基础选择器进行连续书写，如果有标签选择器参与交集，必须书写在开头。</p>
<p>选择范围：选择的是满足所有基础选择器需求的标签，如果一个条件不满足都不能被选中。</p>
<p>比较常见的是标签与类的交集。</p>
<h4 id="更多写法"><a href="#更多写法" class="headerlink" title="更多写法"></a>更多写法</h4><p>交集选择器可以进行类名的连续交集，需要满足更多的条件才能选中标签。</p>
<p>IE6 不支持类名连续交集写法。</p>
<p>交集选择器可以作为其他高级选择器的组成部分。</p>
<h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><p>不同选择器选中的元素都要设置相同的样式，多次书写相同的样式属性对代码造成浪费，可以将前面六种选择器可以进行并集书写，相当于一种简化写法。</p>
<p>书写方式：将多个选择器中间用逗号进行分隔，最后一个后面不能加逗号。</p>
<p>选择范围：是所有的单独选择器选中的标签的并集集合。</p>
<h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p>如果多个标签具有公共样式，但是不能用一个选择器选中，可以使用并集写法。</p>
<p>可以使用标签选择器的并集写法，进行默认样式的清除，替换通配符的功能。</p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>选择器</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML元素</title>
    <url>/2022/08/ad76fb3327df/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>HTML元素指的是从开始标签到结束标签的所有内容，包含开始标签、元素内容、结束标签。</p>
<h3 id="元素内容"><a href="#元素内容" class="headerlink" title="元素内容"></a>元素内容</h3><ul>
<li><p>元素内容可以是纯文本，也可以是其他的HTML元素。这种元素内容包含其他HTML元素的情况，我们可以称为嵌套，也就是div标签元素内部嵌套了p标签元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>div元素内部嵌套<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>一个HTML元素div的内容可能是多个其他元素组成，例如p和h1，此时我们习惯称div是p和h1的父级元素，p和h1是div的子级元素，而p和h1属于同级元素，这种嵌套关系可以有多层。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>div元素内部嵌套p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>div元素内部嵌套的h1元素<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>单标签是不能添加其他元素内容的，可以称为空元素。</p>
</li>
</ul>
<h3 id="标签级别"><a href="#标签级别" class="headerlink" title="标签级别"></a>标签级别</h3><p>根据标签内容可以存放的元素内容不同，可以将双标签划分为两个级别</p>
<ul>
<li>容器级：标签内部可以存放任意内容，包含容器级标签。比如h1，div等。</li>
<li>文本级：标签内部只能存放文字或类似文字的内容，比如存放图片、表单元素等。比如p等。</li>
</ul>
<h3 id="HTML元素的特性"><a href="#HTML元素的特性" class="headerlink" title="HTML元素的特性"></a>HTML元素的特性</h3><p>元素间对空格、换行、缩进形成的空白不敏感，有无空白对在浏览器中加载的效果没有影响。浏览器识别的是元素的开始和结束以及相互之间的嵌套关系。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>空白折叠现象：元素内容如果是文本，所有文字（类似文字内容）之间如果有空格、换行、缩进等空白字符，在浏览器中加载时，链接在一起的空白会折叠成一个空格显示，这就是空白折叠现象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML中所有文字内容之间的空    格、换</span><br><span class="line">行、缩				进都会被折叠成一个空格显示。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>列表</title>
    <url>/2022/08/512ac1494c66/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>列表用于制作HTML中的一系列项目。</p>
<p>通常我们会将内容相关、结构相似、样式相近的内容使用列表结构进行搭建。</p>
<p>根据项目的内容不同，可以有三种语义的列表结构：无序列表、有序列表、定义列表。</p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表需要两个标签参与，分别是ul和li。</p>
<ul>
<li><strong>ul</strong>：unordered list，表示定义一个无序列表的大结构。</li>
<li><strong>li</strong>：list item，列表项，定义的是无序列表内的某一项。</li>
</ul>
<p>ul和li是嵌套关系，快捷键：ul&gt;li。</p>
<p>一个列表中可以有任意个列表项。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>ul内部只能嵌套li，li标签不能脱离ul单独书写。</li>
<li>li标签是一个经典的容器级标签，内部可以放置任意内容，甚至可以放一组ul&gt;li无序列表结构。</li>
<li>无序列表的列表项li之间，没有顺序的先后之分，它们的重要程度是相同的。</li>
<li>无序列表的作用只是搭建列表结构，没有添加样式前缀的功能，样式是由css负责。</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表的语法与无序列表非常类似，只是在语义上有差异。</p>
<p>有序列表由两个标签组成，分别是ol和li。</p>
<ul>
<li><strong>ol</strong>：ordered list，表示定义一个有序的列表的大结构。</li>
<li><strong>li</strong>：list item，定义的是有序列表的每一项。ol和li是嵌套关系，快捷键：ol&gt;li。</li>
</ul>
<p>ol标签内部可以嵌套任意多个li标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>ol内部只能嵌套li标签，而li不能脱离ol单独书写。</li>
<li>li标签是一个经典的容器级标签，内部可以放置任何内容，甚至可以放ol&gt;li。</li>
<li>有序列表的列表项li之间，存在顺序先后之分，根据内容的顺序需要合理调整书写位置。</li>
<li>有序列表的作用只是搭建有顺序的列表结构，前面的数字排序样式不是ol标签的作用，而是css负责的。</li>
</ul>
<h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><p>自定义列表不仅仅是一列项目，而是项目及其注释的组合。</p>
<p>由三个标签组成完整的结构，包含dl、dt和dd。</p>
<ul>
<li><strong>dl</strong>：definition list，表示定义一个自定义列表的大结构。</li>
<li><strong>dt</strong>：definition term，表示定义自定义列表中的一个主题或者术语。</li>
<li><strong>dd</strong>：definition description，定义解释项，表示描述或解释前面的定义主题。</li>
</ul>
<p>dl内部只能嵌套dt和dd，dt和dd是同级关系。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>主题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>解释项<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>dl内部只能嵌套dt和dd，dt与dd不能脱离dl单独书写。</li>
<li>dl内部可以放多组dt和dd，每个dd解释说明的是前面的距离最近的一个dt。</li>
<li>每个dt候面可以有0到多个解释项的dd，每个dd解释的都是前面距离最近的一个dt。</li>
<li>dt和dd标签也是容器级标签，内部可以放置任意内容。</li>
<li>定义列表中的缩进样式由css主责，标签只负责搭建语义结构。</li>
<li>配合着css布局效果，最好每个dl中只添加一组dt和dd，便于后期管理。</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>图像</title>
    <url>/2022/08/2160b72b2670/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li>图像（image）由img标签进行定义。</li>
<li>img标签是单标签，本身相当于一个特殊的文本。</li>
<li>img标签的作用是在指定的位置插入一张图片。</li>
<li>在HTML文件，常用的插入图片类型有：jpg、png、gif。</li>
</ul>
<h3 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h3><p>由于img为单标签，所以它只能通过属性进行相关的图像设置。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>src</td>
<td>表示图片的路径</td>
</tr>
<tr>
<td>width</td>
<td>表示图片的宽度</td>
</tr>
<tr>
<td>height</td>
<td>表示图片的高度</td>
</tr>
<tr>
<td>border</td>
<td>边框属性；它的值可以设置边框的厚度</td>
</tr>
<tr>
<td>title</td>
<td>设置提示文本</td>
</tr>
<tr>
<td>alt</td>
<td>设置图像没有找到时候的替代文本</td>
</tr>
</tbody></table>
<h3 id="src属性和路径"><a href="#src属性和路径" class="headerlink" title="src属性和路径"></a>src属性和路径</h3><ul>
<li>如果需要插入一张图片到HTML中，img标签必须设置src属性。</li>
<li><strong>src</strong>：全称source资源，属性值是图片查找的路径。</li>
<li><strong>路径</strong>：指的是寻找文件时所历经的线路，在HTML中有特殊的书写语法。</li>
<li>路径分为相对路径和绝对路径，不同的方式出发点和参考位置不同。</li>
</ul>
<h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>相对路径查找文件时，需要从HTML文件本身出发，根据相对的位置进行查找，包括三种方向。</p>
<ul>
<li><strong>同级查找</strong>：指目标文件与HTML文件位于同一级，直接书写文件名+后缀格式。</li>
<li><strong>子级查找</strong>：指目标文件在与HTML文件同一级的文件夹的内部，需要先查找文件夹名称，然后通过关闭符号**/<strong>进入文件夹查找里面的文件；如果有多层文件夹，需要</strong>/**进入多层。</li>
<li><strong>上级查找</strong>：指目标文件在HTML文件所在文件夹的更上一级，需要跳出当前文件夹到上一层，路径写法利用**../<strong>表示跳出一级，如果跳出多级书写多次</strong>../**，直到找到文件。</li>
</ul>
<h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><ul>
<li>绝对路径查找文件时，不需要从HTML文件出发，而是直接从电脑的盘符出发进行查找，或者使用网址形式查找。</li>
<li><strong>盘符出发</strong>：例如从c盘或者d盘触发查找图片，书写时以**c:/**开头，后续类似子级查找写法直至找到目标文件。</li>
<li><strong>网址形式</strong>：要查找的文件是来自网络资源，路径写法以**http://**开头。</li>
<li>从盘符出发的绝对路径的缺点<ul>
<li>盘符出发的路径不可移植，不可移动。</li>
<li>盘符出发的路径容易出现中文字符，中文的路径容易出现错误。</li>
</ul>
</li>
<li>路径实际应用<ul>
<li>建议多使用相对路径，可以适当使用网址形式的绝对路径。</li>
<li>使用相对路径必须将图片或文件与HTML同时上传，而且需要保持相对位置不变。</li>
</ul>
</li>
</ul>
<h3 id="宽度和高度"><a href="#宽度和高度" class="headerlink" title="宽度和高度"></a>宽度和高度</h3><ul>
<li><strong>width</strong>：图片的宽度。</li>
<li><strong>height</strong>：图片的高度。</li>
<li><strong>属性值</strong>：以px为单位的数值，或者省略px不写。</li>
<li>如果不设置两个属性，会以图片的原始尺寸加载。</li>
<li>如果设置属性<ul>
<li>只设置了其中一个，另一个会等比例变换。</li>
<li>如果两个都设置，按照设置值加载。</li>
</ul>
</li>
</ul>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><ul>
<li><strong>border</strong>：设置图片的边框。</li>
<li><strong>属性值</strong>：数值、数值是几表示边框为几像素。</li>
<li>注意：border属性可以使用css进行设置，css中的边框有更多的设置效果。</li>
</ul>
<h3 id="提示文本"><a href="#提示文本" class="headerlink" title="提示文本"></a>提示文本</h3><ul>
<li><strong>title</strong>：设置的是鼠标悬停时的提示文本。</li>
<li><strong>属性值</strong>：自定义的提示文字内容。</li>
</ul>
<h4 id="替换文本"><a href="#替换文本" class="headerlink" title="替换文本"></a>替换文本</h4><ul>
<li><strong>alt</strong>：设置的时图片查找错误时，出现的替换文本。如果能正常找到图片，替换文本是不显示的。</li>
<li><strong>属性值</strong>：自定义的替换内容。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>img标签最为重要的属性为src，尽量使用alt属性对图片进行说明，添加相对关键词可以有利于SEO搜索引擎优化。其他属性可以根据需求进行设置。</p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>字符实体</title>
    <url>/2022/08/b53834f00b8a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在普通文字书写时，有一些特殊符号不能直接书写（例如连续的空格），或者符号具有特殊功能也不能直接书写（例如&lt; &gt;符号）。可以使用一些HTML提前预留好的替换字符进行书写，这些替换字符叫做字符实体。</p>
<p>通过查询w3cshool手册，查看所有的字符实体。</p>
<p>使用方法：可以查询特殊字符的替换写法，包含实体名称以及实体编号。</p>
<table>
<thead>
<tr>
<th>显示结果</th>
<th>描述</th>
<th>实体名称</th>
<th>实体编号</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>空格</td>
<td><code>&amp;nbsp;</code></td>
<td><code>&amp;#160;</code></td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>小于号</td>
<td><code>&amp;lt;</code></td>
<td><code>&amp;#60;</code></td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>大于号</td>
<td><code>&amp;gt;</code></td>
<td><code>&amp;#62;</code></td>
</tr>
<tr>
<td><code>&amp;</code></td>
<td>和号</td>
<td><code>&amp;amp;</code></td>
<td><code>&amp;#38;</code></td>
</tr>
<tr>
<td><code>&quot;</code></td>
<td>引号</td>
<td><code>&amp;quot;</code></td>
<td><code>&amp;#34;</code></td>
</tr>
<tr>
<td><code>&#39;</code></td>
<td>撇号</td>
<td><code>&amp;apos;</code>(IE不支持)</td>
<td><code>&amp;#39;</code></td>
</tr>
<tr>
<td><code>¢</code></td>
<td>分(<code>cent</code>)</td>
<td><code>&amp;cent;</code></td>
<td><code>&amp;#162;</code></td>
</tr>
<tr>
<td><code>£</code></td>
<td>镑(<code>pound</code>)</td>
<td><code>&amp;pount;</code></td>
<td><code>&amp;#163;</code></td>
</tr>
<tr>
<td><code>¥</code></td>
<td>元(<code>yen</code>)</td>
<td><code>&amp;yen;</code></td>
<td><code>&amp;#165;</code></td>
</tr>
<tr>
<td><code>€</code></td>
<td>欧元(<code>euro</code>)</td>
<td><code>&amp;euro;</code></td>
<td><code>&amp;#8364;</code></td>
</tr>
<tr>
<td><code>§</code></td>
<td>小节</td>
<td><code>&amp;sect;</code></td>
<td><code>&amp;#167;</code></td>
</tr>
<tr>
<td><code>©</code></td>
<td>版权(<code>copyright</code>)</td>
<td><code>&amp;copy;</code></td>
<td><code>&amp;#169;</code></td>
</tr>
<tr>
<td><code>®</code></td>
<td>注册商标</td>
<td><code>&amp;reg;</code></td>
<td><code>&amp;#174;</code></td>
</tr>
</tbody></table>
<p>规则：所有的字符实体和实体编号都是以&amp;开头，以;结尾的。</p>
<p>建议</p>
<ul>
<li>使用实体名称，好处是名称易于记忆。不过坏处是，浏览器也许并不支持所有实体名称（对实体数字的支持却很好）。</li>
<li>不需要强制记忆所有的字符实体，只需要记忆常用的几个字符实体名称即可，其他可以通过手册进行查询。</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>布局标签</title>
    <url>/2022/08/5277673da78e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h3><p>div和span标签常用作布局工具，我们俗称盒子，后期h5也增加了更多的布局标签。</p>
<p>div和span都是没有具体明确的语义的。</p>
<h4 id="div标签"><a href="#div标签" class="headerlink" title="div标签"></a>div标签</h4><ul>
<li><strong>div</strong>：全称division，分隔、区域、跨度的意思。俗称大盒子。</li>
<li>div是双标签，是最经典的容器级标签，内部可以放置任意内容。</li>
<li>作用：多用于划分网页区域，进行结构布局。一般将相关的内容使用div包裹起来，整体设置大的布局效果。</li>
</ul>
<h4 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h4><ul>
<li><strong>span</strong>：小区域、小跨度的意思。俗称小盒子。</li>
<li>span也是双标签，容器级标签。</li>
<li>作用：在不改变整体效果的情况下，可以辅助进行局部调整。</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>文本格式化</title>
    <url>/2022/08/dd97a23080d4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>HTML中有部分标签是用来对文字进行格式化显示设置的，比如粗体和斜体等。</p>
<p>但是在HTML4.0版本规范后，结构和样式进行了分离，HTML只负责搭建结构，CSS负责格式化样式，所以大部分文本格式化标签被废弃，但是在HTML4.01和XHTML1.0 transitional版本中依旧可以使用。</p>
<p>文本格式化的标签均为双标签，且为文本级标签，内部只能书写文字。</p>
<table>
<thead>
<tr>
<th align="left">标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">b</td>
<td>定义粗体文本，bold</td>
</tr>
<tr>
<td align="left">big</td>
<td>定义大号字</td>
</tr>
<tr>
<td align="left">em</td>
<td>定义着重文字，emphasis，自带斜体效果</td>
</tr>
<tr>
<td align="left">i</td>
<td>定义斜体字，italic</td>
</tr>
<tr>
<td align="left">small</td>
<td>定义小号字</td>
</tr>
<tr>
<td align="left">strong</td>
<td>定义加重语气，自带加粗效果</td>
</tr>
<tr>
<td align="left">sub</td>
<td>定义下标字，subscript</td>
</tr>
<tr>
<td align="left">sup</td>
<td>定义上标字，superscript</td>
</tr>
<tr>
<td align="left">ins</td>
<td>定义插入字，自带下划线效果，insert</td>
</tr>
<tr>
<td align="left">del</td>
<td>定义删除字，delete</td>
</tr>
<tr>
<td align="left">s</td>
<td>不赞成使用，使用del代替，strike的简化</td>
</tr>
<tr>
<td align="left">strike</td>
<td>不赞成使用，使用del代替</td>
</tr>
<tr>
<td align="left">u</td>
<td>定义下划字，不赞成使用，使用css中样式代替，underline</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>标题</title>
    <url>/2022/08/f94e8f5866d3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>标题</strong>（Heading），是通过h1-h6六个标签分别来对应六个级别的标题进行定义的。</p>
<p>h1定义最大的标题，h6定义最小的标题。</p>
<p>h1-h6标签都是双标签，且是容器级标签。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>给标签内部的元素内容添加对应级别的标题的语义，不负责文字的粗体、字号等样式，样式是由CSS设定的。</p>
<h3 id="级别"><a href="#级别" class="headerlink" title="级别"></a>级别</h3><p>标题标签之间是不能互相嵌套的，下一级标题与上一级标题之间通过同级关系书写，下一级标题解释说明的是前面距离最近的上一级标题</p>
<h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><ul>
<li>标题标签对于呈现文档结构非常重要，使用时要根据标签的重要成都进行选择，其中h1标签最重要，h2标签次重要，以此类推。</li>
<li>h1在整个HTML中的权重非常高，内部应该放置HTML中最重要的内容，比如logo。</li>
<li>h1由于非常重要，内部的文字对于提高搜索引擎排名也非常重要，为了防止作弊，如果一个页面出现多个h1，反而降低权重。约定俗成的，一个页面中只会出现一个h1。</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>段落和换行</title>
    <url>/2022/08/c90220decc6b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><ul>
<li>段落（paragraph）是通过p标签定义的。</li>
<li>p标签是双标签，且为文本级标签。内部只能放置文本、图片、表单元素，或者废弃的font标签等。</li>
<li>每一对儿p标签内部的元素为一个完整的段落，如果有多个段落，需要分别使用不同的p标签进行定义。</li>
</ul>
<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><ul>
<li>br（breaking）标签是HTML中一个简单的换行符。</li>
<li>br标签是一个单标签。</li>
<li>在需要换行的位置可以使用br标签书写，但是br与p不同，br没有建立新的段落的语义，只是简单的进行强制转换。</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>注释</title>
    <url>/2022/08/c76ef35f17ed/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在很多代码技术中都可以添加注释内容，我们也可以向HTML源代码添加注释</p>
<h3 id="HTML注释语法"><a href="#HTML注释语法" class="headerlink" title="HTML注释语法"></a>HTML注释语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释内容 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 快捷键：ctrl+/ --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>注释只在源代码中可见，在浏览器窗口是不显示的</p>
<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ul>
<li>在源代码中添加描述性的提示信息，便于我们阅读代码。</li>
<li>对于HTML纠错也大有帮助，可以通过注释某一行HTML代码，一边检索错误的位置。</li>
<li>暂时注释掉一部分不用的代码，便于后期恢复代码。</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>表单</title>
    <url>/2022/08/d94ae2f69558/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>表单是用来收集用户输入信息的。</p>
<h3 id="表单的组成"><a href="#表单的组成" class="headerlink" title="表单的组成"></a>表单的组成</h3><p>HTML表单用于搜集不同类型的用户输入，表单元素就是网页中提供用户进行输入或点击的小控件。</p>
<p>在HTML中，一个完整的表单通常由表单域、提示信息和表单控件（也称为表单元素）3个部分构成。</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p><strong>表单域</strong>：相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p>
<p><strong>提示信息</strong>：一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p>
<p><strong>表单控件</strong>：包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>表单元素</title>
    <url>/2022/08/29ab1fdd5e20/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>input标签是最重要的一个表单元素。</p>
<p>input标签为单标签，本身相当于一个特殊的文本。</p>
<p>input标签需要通过标签属性实现各种功能。</p>
<table>
    <tr>
        <th>属性名</th>
        <th>属性值</th>
        <th>描述</th>  
    </tr>
    <tr>
        <td rowspan="10">type</td>
        <td>text</td>
        <td>单行文本输入框</td>
    </tr>
    <tr>
        <td>password</td>
        <td>密码输入框</td>
    </tr>
    <tr>
        <td>radio</td>
        <td>单选框</td>
    </tr>
    <tr>
        <td>checkbox</td>
        <td>复选框</td>
    </tr>
    <tr>
        <td>button</td>
        <td>普通按钮</td>
    </tr>
    <tr>
        <td>reset</td>
        <td>重置按钮</td>
    </tr>
    <tr>
        <td>submit</td>
        <td>提交按钮</td>
    </tr>
    <tr>
        <td>image</td>
        <td>图像形式的按钮</td>
    </tr>
    <tr>
        <td>file</td>
        <td>定义输入字段和“浏览"按钮，供文件上传。</td>
    </tr>
    <tr>
        <td>hidden</td>
        <td>定义隐藏的输入字段</td>
    </tr>
    <tr>
        <td>name</td>
        <td>自定义</td>
        <td>定义控件的名称</td>
    </tr>
    <tr>
        <td>value</td>
        <td>自定义</td>
        <td>定义控件的默认文本值</td>
    </tr>
    <tr>
        <td>size</td>
        <td>数字</td>
        <td>定义控件的宽度</td>
    </tr>
    <tr>
        <td>checked</td>
        <td>checked</td>
        <td>定义选框控件的默认被选中项</td>
    </tr>
    <tr>
        <td>maxlength</td>
        <td>数字</td>
        <td>定义允许输入的最多字符数</td>
    </tr>
</table>

<p>其中，type属性的值不同，决定了input标签的形态不同。</p>
<h4 id="单行文本输入框：text"><a href="#单行文本输入框：text" class="headerlink" title="单行文本输入框：text"></a>单行文本输入框：text</h4><p>input标签的type属性值为text。</p>
<p>定义提供用户输入的单行文本的输入框，不能输入多行文字。</p>
<p>常用value属性定义默认的输入文字。</p>
<h4 id="密码输入框：password"><a href="#密码输入框：password" class="headerlink" title="密码输入框：password"></a>密码输入框：password</h4><p>input标签的type属性值为password。</p>
<p>定义提供用户输入的密码框。</p>
<p>password 字段中的字符会被做掩码处理（显示为星号或实心圆）。</p>
<h4 id="单选框：radio"><a href="#单选框：radio" class="headerlink" title="单选框：radio"></a>单选框：radio</h4><p>input标签的type属性值为radio。</p>
<p>定义提供用户点击选择的单选框。</p>
<p>单选框一般都是成组出现，多个单选框组成一组选择的情况。</p>
<p>同一组单选框之间必须是互斥的关系，通过给同一组单选框都设置相同的name属性值实现。</p>
<p>默认选中设置</p>
<ul>
<li>单选框和复选框都可以提前设置默认选中项。</li>
<li>input标签有一个checked属性，如果不设置表示默认没有选中。属性值如果设置为”checked”，表示该项默认被选中。</li>
</ul>
<h4 id="复选框：checkbox"><a href="#复选框：checkbox" class="headerlink" title="复选框：checkbox"></a>复选框：checkbox</h4><p>input标签的type属性值为checkbox。</p>
<p>定义提供用户点击选择的多选框。</p>
<p>复选框允许用户在有限数量的选项中选择零个或多个选项。</p>
<p>同一组复选框最好也设置相同的name属性。</p>
<p>默认选中设置</p>
<ul>
<li>单选框和复选框都可以提前设置默认选中项。</li>
<li>input标签有一个checked属性，如果不设置表示默认没有选中。属性值如果设置为”checked”，表示该项默认被选中。</li>
</ul>
<h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><p>input标签有四种形式的按钮</p>
<table>
<thead>
<tr>
<th>type</th>
<th>名称</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>button</td>
<td>普通按钮</td>
<td>没有任何特殊功能</td>
</tr>
<tr>
<td>reset</td>
<td>重置按钮</td>
<td>将同一个form中填写的表单内容清空，恢复成默认</td>
</tr>
<tr>
<td>submit</td>
<td>提交按钮</td>
<td>将填写数据提交到form中指定的后台服务器，并重置清空form中填写的信息</td>
</tr>
<tr>
<td>image</td>
<td>图片按钮</td>
<td>默认与提交按钮的效果相同，使用的图片需要利用src属性查找正确路径。</td>
</tr>
</tbody></table>
<h4 id="文件上传：file"><a href="#文件上传：file" class="headerlink" title="文件上传：file"></a>文件上传：file</h4><p>input标签的type属性值为file。</p>
<p>定义文件上传按钮，可以提供用户选择本地文件进行上传服务器。</p>
<p>使用input的multiple属性，可以决定是否可以选择多个文件。</p>
<h3 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h3><p>文本域使用textarea标签定义，制作可以输入多行文本的区域。</p>
<p>textarea标签为双标签，本身相当于一个特殊的文字。</p>
<p>文本域可以设置默认输入的文字，在双标签之间书写默认文字。</p>
<p>textarea属性</p>
<ul>
<li>textarea有两个标签属性，可以设置显示区域大小。</li>
<li>rows：行，属性值是数字，数字是几表示文本框显示的最大行数，如果超过了行数，会被隐藏并且出现滚动条。</li>
<li>cols：列，属性值是数字，数字是几，表示在出现滚动条之后，每一行显示的最大字节数（一个汉字按2字节计算）。</li>
</ul>
<h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><p>HTML中的下拉菜单提前设置一些选项，然后可以通过点击选择其中一项。</p>
<p>下拉菜单需要至少两个标签完成结构：</p>
<ul>
<li>select：选择，表示定义下拉菜单整体结构。</li>
<li>option：选项，表示定义下拉菜单的每一项。</li>
<li>两个标签都是双标签，文本级标签。</li>
<li>关系：select&gt;option，option可以有任意多项。</li>
</ul>
<p>默认选中项</p>
<ul>
<li>默认情况下，选中的是第一项。</li>
<li>下拉菜单可以通过给option标签设置selected属性，属性值为selected，更改默认选中项。</li>
</ul>
<p>分组管理</p>
<ul>
<li>下拉菜单中如果选项变得复杂，可以将option进行分组管理。</li>
<li>可以使用optgroup标签对选项进行分组，optgroup是一个双标签。</li>
<li>关系：select&gt;optgroup&gt;option</li>
<li>optgroup可以设置一个label属性，表示给这一组选项添加一个分组标签名，分组标签optgroup是不能被点击选择的。</li>
</ul>
<h3 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h3><p>所有的表单元素都可以通过绑定其他内容去扩大触发点击范围，这时需要使用一个label标签。</p>
<p>label标签的作用是帮表单元素定义标注（标记）。</p>
<p>如果将表单控件与提示内容使用label进行绑定后，当用户鼠标点击label内的提示内容时，浏览器就会自动将焦点转到和标签相关的表单控件上。</p>
<p>绑定方法一</p>
<ul>
<li>给表单元素设置id属性。</li>
<li>然后将需要绑定的其他内容用label标签包裹。</li>
<li>给label标签设置for属性，属性值为绑定的表单元素的id属性值。</li>
</ul>
<p>绑定方法二</p>
<ul>
<li>如果绑定内容和表单元素写在一起，可以化简绑定写法。</li>
<li>直接使用label标签将绑定内容与表单元素一起进行嵌套。</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>表单域</title>
    <url>/2022/08/e665f48673e3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>HTML表单域使用form标签进行定义。</p>
<p>form标签是一个功能性标签，填写的表单信息要想正确的提交到后台服务器，必须放在一个form标签之内。</p>
<p>form标签为双标签，容器级标签。</p>
<h3 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h3><p>form标签通过对应属性规定提交数据的方法和提交位置。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>action</td>
<td>url</td>
<td>指定接收并处理表单数据的服务器程序的url地址</td>
</tr>
<tr>
<td>method</td>
<td>get/post</td>
<td>用于设置表单数据的提交方式</td>
</tr>
<tr>
<td>name</td>
<td>自定义名称</td>
<td>规定表单的名称</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>表格</title>
    <url>/2022/08/04b326bc64aa/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="表格基础"><a href="#表格基础" class="headerlink" title="表格基础"></a>表格基础</h3><p>创建一个简单的表格至少有三个标签组成，分别是table、tr、td标签。</p>
<ul>
<li><strong>table</strong>：表格，定义的是整个的表格大结构。</li>
<li><strong>tr</strong>：table rows，表格的行，定义的是表格由多少行组成。</li>
<li><strong>td</strong>：table data，表格数据，也叫表格单元格，定义的是每一行内部的单元格。</li>
</ul>
<p><strong>三者的关系</strong>：table&gt;tr&gt;td。一个表格中有多个行，每个行中有多个单元格。</p>
<h3 id="table的属性"><a href="#table的属性" class="headerlink" title="table的属性"></a>table的属性</h3><p>table标签可以添加border边框属性。</p>
<ul>
<li><strong>属性值</strong>：数字，表示像素值。</li>
</ul>
<p>表格的单元格之间有默认的空隙，会导致双线边框。</p>
<ul>
<li><strong>解决方法</strong>：设置标签样式属性style。</li>
<li><strong>属性值</strong>：<strong>border-collapse : collapse;</strong> 表示边框塌陷。</li>
</ul>
<h3 id="表头单元格"><a href="#表头单元格" class="headerlink" title="表头单元格"></a>表头单元格</h3><ul>
<li>如果要绘制表头，使用标签th，table head data，表头单元格。</li>
<li>在表格中绘制的时候，替换的是td的位置。</li>
<li>th标签中自带默认的css样式效果，文字显示粗体居中。</li>
</ul>
<h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><p>常见的表格操作中，有一种叫做合并单元格，可以通过单元格属性进行设置。</p>
<h4 id="单元格属性"><a href="#单元格属性" class="headerlink" title="单元格属性"></a>单元格属性</h4><ul>
<li>表格的单元格可以进行合并，通过th和td的两个属性可以进行合并设置。</li>
<li><strong>rowspan</strong>：跨行和并。上下的合并。</li>
<li><strong>colspan</strong>：跨列合并。左右的合并。</li>
<li><strong>属性值</strong>：数字，数字是几表示跨几行或跨几列合并。</li>
</ul>
<h4 id="制作技巧"><a href="#制作技巧" class="headerlink" title="制作技巧"></a>制作技巧</h4><ul>
<li>先列出所有行tr，以最小单元格为标准。</li>
<li>再添加每一行的td或th单元格。</li>
<li>划分单元格所在行时，顶边对齐的属于同一行。</li>
<li>将所有行和列写完后，再查看哪个单元格有跨行或跨列，属性值的个数要参考最小的单元格。</li>
</ul>
<h3 id="表格分区"><a href="#表格分区" class="headerlink" title="表格分区"></a>表格分区</h3><p>一个完整的表格分为四个大的区域：表格标题、表格头部、表格主体、表格页脚。</p>
<h4 id="分区标签"><a href="#分区标签" class="headerlink" title="分区标签"></a>分区标签</h4><p>table内部最直接的子级包含四个分区标签，他们都是双标签。</p>
<ul>
<li><strong>caption</strong>：表格的标题，内部书写标题文字。</li>
<li><strong>thead</strong>：table head，表格的头部。内部嵌套tr&gt;th。</li>
<li><strong>tbody</strong>：table body，表格的主体。内部嵌套tr&gt;td。</li>
<li><strong>tfoot</strong>：table foot，表格的页脚。内部嵌套tr&gt;td。</li>
</ul>
<p>四个分区可以选择性的进行组合。</p>
<p>注意：不论书写顺序如何颠倒，浏览器中的加载顺序都是自动按照caption、thead、tbody、tfoot执行的。</p>
<h4 id="制作技巧-1"><a href="#制作技巧-1" class="headerlink" title="制作技巧"></a>制作技巧</h4><ul>
<li>先书写大分区标签结构。</li>
<li>填充每个分区的内部内容。</li>
<li>如果有合并单元格内容，进行单元格合并。</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>超级链接</title>
    <url>/2022/08/b4ac4d7f3a99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>HTML使用超级链接与网络上的另一个文档相连。超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。</p>
<h3 id="超级链接标签"><a href="#超级链接标签" class="headerlink" title="超级链接标签"></a>超级链接标签</h3><ul>
<li>在HTML中使用a标签可以创建链接。</li>
<li>a全称anchor，锚的意思。</li>
<li>a为双标签。</li>
<li>作用：在指定的位置添加超级链接，提供用户进行点击和跳转。</li>
<li>a标签可以实现两种跳转：跨页面跳转、页面内跳转。实现跳转的方式需要用到一些标签属性。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>链接内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="href属性"><a href="#href属性" class="headerlink" title="href属性"></a>href属性</h3><ul>
<li>href全称hypertext reference，超文本引用，用于规定链接的目标地址。</li>
<li>属性值：链接目标的路径地址。可以使用相对路径或网址形式的绝对路径。</li>
<li>href属性非常重要，a标签想要实现点击跳转，必须设置该属性，拥有这个属性a标签在鼠标移上去时才会显示一个小手指针状态。</li>
</ul>
<h3 id="target属性"><a href="#target属性" class="headerlink" title="target属性"></a>target属性</h3><ul>
<li>使用target属性，可以定义被链接的文档在何处跳转显示。</li>
<li><strong>_self</strong>：默认值，表示跳转的页面在当前窗口打开，不会打开新的窗口。</li>
<li><strong>_blank</strong>：空白的，表示跳转的页面在新窗口打开。</li>
</ul>
<h3 id="title属性"><a href="#title属性" class="headerlink" title="title属性"></a>title属性</h3><ul>
<li>title设置的时鼠标悬停时的提示文本，与img标签类似。</li>
<li>属性值：自定义的文字内容。</li>
<li>该属性用于给用户进行提示，该链接的功能是什么，提高用户的体验。</li>
</ul>
<h3 id="锚点跳转"><a href="#锚点跳转" class="headerlink" title="锚点跳转"></a>锚点跳转</h3><p>超级链接的跳转效果不止包括跨页面的跳转，还包括锚点跳转的方式。</p>
<h4 id="页面内锚点跳转"><a href="#页面内锚点跳转" class="headerlink" title="页面内锚点跳转"></a>页面内锚点跳转</h4><ul>
<li><p>这种跳转方式实现的是从某个位置跳转到同页面的另一个位置。</p>
</li>
<li><p>制作方法分为两个步骤，分别是设置锚点、添加链接。</p>
</li>
<li><p>设置锚点，也就是设置跳转目标位置，有两种设置方式。</p>
<ul>
<li><p>在目标位置找到任意一个标签，给它添加id属性，id的属性值必须是唯一的。id的属性值自定义规则：必须以字母开头，候面可以有字母、数字、下划线和横线，区分大小写。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;mubiao&quot;</span>&gt;</span>锚点位置<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在目标位置添加一个空的a标签，只设置一个name属性，name属性值设置方式与id相同，也必须是唯一的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;mubiao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
<li><p>添加链接</p>
<ul>
<li><p>链接到锚点，在需要点击的位置设置a标签，给a的href属性设置属性值为#id属性值或者#加a的name属性值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#mubiao&quot;</span>&gt;</span>点击文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="跨页面锚点跳转"><a href="#跨页面锚点跳转" class="headerlink" title="跨页面锚点跳转"></a>跨页面锚点跳转</h4><ul>
<li>这种跳转方法综合了跨页面跳转和锚点跳转。</li>
<li>制作方法也分为两个步骤，分别是设置锚点、添加链接。</li>
<li>第一步：设置锚点，方式与页面内锚点跳转一直，在目标网页的指定位置设置使用id或name属性。</li>
<li>第二步：链接到锚点，添加超级链接时href属性需要更改，属性值写在页面的路径#id。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;new.html#mubiao&quot;</span>&gt;</span>点击文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>音频和视频</title>
    <url>/2022/08/6ce1026cf918/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><ul>
<li>音频使用audio标签进行定义。</li>
<li>audio是双标签。</li>
<li>同图片一样，需要使用src属性设置音频查找的路径。</li>
<li>音频文件支持的格式包括：**.mp3<strong>、</strong>.ogg<strong>、</strong>.wav**。</li>
<li>音频控制条属性<ul>
<li>音频加载后不会自动显示播放器的控制条，需要使用controls属性进行设置，属性值也是controls。</li>
</ul>
</li>
</ul>
<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><ul>
<li>视频的设置方法与音频非常类似。</li>
<li>视频使用video标签进行定义。</li>
<li>video是双标签。</li>
<li>使用src属性设置视频查找的路径。</li>
<li>视频我呢见支持的格斯包括：**.mp4<strong>、</strong>.ogg<strong>、</strong>.webm**。</li>
<li>视频控制条属性<ul>
<li>视频也需要使用controls属性设置控制条，属性值也是controls。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>元素</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>字符集</title>
    <url>/2022/08/75c47f879da5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>head标签内部的meta标签通过http-equiv属性定义了当前的网页所使用的字符编码。char：character，字符。set：集合。</p>
<h3 id="不同版本的字符编码"><a href="#不同版本的字符编码" class="headerlink" title="不同版本的字符编码"></a>不同版本的字符编码</h3><h4 id="XHTML1-0版本"><a href="#XHTML1-0版本" class="headerlink" title="XHTML1.0版本"></a>XHTML1.0版本</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="HTML5版本"><a href="#HTML5版本" class="headerlink" title="HTML5版本"></a>HTML5版本</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用字符集编码"><a href="#常用字符集编码" class="headerlink" title="常用字符集编码"></a>常用字符集编码</h3><h4 id="国际通用字库"><a href="#国际通用字库" class="headerlink" title="国际通用字库"></a>国际通用字库</h4><p><strong>UTF-8</strong>：以字节为单位对Unicode万国码进行编码，涵盖了所有人类的语言文字，一个汉字为三个字节大小。</p>
<h4 id="中文国标字库"><a href="#中文国标字库" class="headerlink" title="中文国标字库"></a>中文国标字库</h4><p><strong>gb2312</strong>：共收入汉字6763个和包括拉丁字母、希腊字母、日文平假名级片假名字母、俄语西里尔字母在内的682个。</p>
<p><strong>gbk</strong>：是gb2312的扩展，增加了繁体字，共收入21886个汉字和图形符号，其中汉字（包括部首和构件）21003个，图形符号883个，一个汉字为2个字节大小。</p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h4><ul>
<li>如果没有网页加载速度要求，或者制作的是外文网站，使用utf-8</li>
<li>如果含有大量中文汉字的网站，并且要求网页加载速度快，使用gbk</li>
</ul>
<p>注意：meta标签声明的字库，必须和编辑器软件默认编译字库相同，否则会出现两个字库不匹配，浏览器加载时出现乱码</p>
]]></content>
      <categories>
        <category>HTML</category>
        <category>字符集</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML属性</title>
    <url>/2022/08/2d4ccce33e96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>HTML标签可以添加属性，属性可以提供关于HTML元素的更多信息。</p>
<h3 id="HTML属性规范"><a href="#HTML属性规范" class="headerlink" title="HTML属性规范"></a>HTML属性规范</h3><ul>
<li><p>书写位置：必须写在开始标签或者单标签之内，与标签名之间用空格进行分隔。</p>
</li>
<li><p>属性包括：属性名（key）、属性值（value）。属性名与属性值之间的写法通常称作键值对写法，HTML标签属性的键值对写法是k=”v”，XHTML要求属性值必须在双引号内部。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">k</span>=<span class="string">&quot;v&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>一个标签内可以设置多个不同的属性，属性与属性之间使用空格进行分隔，每个属性的键值对写法都是k=”v”。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">k</span>=<span class="string">&quot;v&quot;</span> <span class="attr">k</span>=<span class="string">&quot;v&quot;</span> <span class="attr">k</span>=<span class="string">&quot;v&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>部分标签属性k可以设置多个属性值v，所有属性值v都必须写在同一对双引号内，值与值之间需要使用空格分隔。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">k</span>=<span class="string">&quot;v1 v2 v3 v4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>属性</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>DTD</title>
    <url>/2022/08/172d32bfd3ad/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>完整的HTML文件的第一行内容叫做文档定义类型，英文DocType Definition，简称DTD。也称作文档声明类型，DocType Declaration。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>告知浏览器该网页使用的是哪个版本的HTML规范，让浏览器按照对应版本的HTML语法进行解析页面。</p>
<h3 id="不同版本的DTD"><a href="#不同版本的DTD" class="headerlink" title="不同版本的DTD"></a>不同版本的DTD</h3><h4 id="XHTML1-0版本"><a href="#XHTML1-0版本" class="headerlink" title="XHTML1.0版本"></a>XHTML1.0版本</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span>  <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h4 id="HTML5版本"><a href="#HTML5版本" class="headerlink" title="HTML5版本"></a>HTML5版本</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基本结构</title>
    <url>/2022/08/c5212201cab0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="基本骨架"><a href="#基本骨架" class="headerlink" title="基本骨架"></a>基本骨架</h3><p>HTML文件最基本的四个标签，组成了网页的基本骨架，包括：html、head、title、body四组标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="html标签"><a href="#html标签" class="headerlink" title="html标签"></a>html标签</h4><ul>
<li><strong>作用</strong>：定义HTML文件的根元素，表示整个HTML文档，所有的标签都要书写在html标签内部。</li>
</ul>
<h4 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h4><ul>
<li><p><strong>作用</strong>：用于存放title，meta，base，style，script，link。内部用于对网页的设置，除了title内部的文字，其他标签都不显示在浏览器上。</p>
</li>
<li><p>注意在head标签中我们必须要设置的标签是title。</p>
</li>
</ul>
<h4 id="title标签"><a href="#title标签" class="headerlink" title="title标签"></a>title标签</h4><ul>
<li><strong>作用</strong><ul>
<li>让网页拥有一个属于自己的标题。</li>
<li>title中的关键字可以作为搜索引擎抓取时的关键字，提高SEO搜索引擎优化。</li>
<li>内部的内容会显示在搜索结果的标题部分。</li>
<li>作为浏览器收藏夹默认的网页标题。</li>
</ul>
</li>
<li>建议网页必须添加title标签内部内容，内容尽量精简，提取网页的关键字。</li>
</ul>
<h4 id="body标签"><a href="#body标签" class="headerlink" title="body标签"></a>body标签</h4><ul>
<li><p><strong>作用</strong>：定义网页的主题部分，用于存放所有的HTML显示内容的标签p，h1，a，div等。</p>
</li>
<li><p>body内部的元素内容会显示在浏览器的窗口中。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML规范版本和标签语法</title>
    <url>/2022/08/e3534ecf4d38/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="HTML规范版本"><a href="#HTML规范版本" class="headerlink" title="HTML规范版本"></a>HTML规范版本</h3><ul>
<li><p><strong>W3C</strong>：<strong>world wide web consortium</strong>，万维网联盟。专门发布和维护互联网的规范和标准。</p>
</li>
<li><table>
<thead>
<tr>
<th>版本</th>
<th>发布时间</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>HTML1.0</td>
<td>1993.06</td>
<td>互联网工程小组（IETF）发布的工作草案</td>
</tr>
<tr>
<td>HTML2.0</td>
<td>1995.01</td>
<td>2000年6月发布之后被宣布已经过时</td>
</tr>
<tr>
<td>HTML3.2</td>
<td>1997.01.14</td>
<td>W3C推荐标准</td>
</tr>
<tr>
<td>HTML4.0</td>
<td>1997.12.18</td>
<td>W3C推荐标准，引入了样式表CSS，实现了结构和样式分离</td>
</tr>
<tr>
<td>HTML4.01</td>
<td>1999.12.24</td>
<td>W3C推荐标准，修复了HTML4.0中的漏洞</td>
</tr>
<tr>
<td>XHTML1.0</td>
<td>2000.01.20</td>
<td>在HTML4.01基础上进行的升级拓展和严格化</td>
</tr>
<tr>
<td>HTML5</td>
<td>2008.01.22</td>
<td>HTML5在2012年已形成稳定的版本</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><p>HTML标记通常被成为HTML标签（HTML tag）。标签在书写和使用过程中，必须遵循特定的语法。</p>
<ul>
<li><p>标签名必须书写在一堆尖括号&lt;&gt;内部。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>标签分为单标签和双标签，双标签必须成对出现。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 双标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>双标签包含开始标签和结束标签，结束标签必须书写关闭符号**/**，单标签也需要进行自封闭书写。在HTML5中，单标签可以不写关闭符号。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 错误写法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div&gt;&lt;div&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;br&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 正确写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML的概念</title>
    <url>/2022/08/bcec9513a4dd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><strong>Hypertext Markup Language</strong>：<strong>超文本标记语言</strong>。是用来制作网页的一种标记语言。<ul>
<li><strong>超文本</strong>：是超级文本的缩写，简单来说超文本就是用于链接另一个文本或多媒体内容的文本，比如链接到图片、链接、音频、视频、程序等。</li>
<li><strong>标记</strong>：又叫做标签（HTML tag），有特殊的书写规范，是写给浏览器的一种语法格式，结合普通的文字信息，实现特殊的语义或显示内容。在编辑器中可以编辑和查看，在浏览器中不显示。</li>
</ul>
</li>
<li><strong>纯文本格式的文件</strong>，内部只能书写文字内容，不能添加图片、音频、视频等，但是在网页中给用户呈现的效果却包含了文字以外的内容，这种效果就是HTML语言区别于其他文件的不同之处。</li>
<li><strong>功能</strong>：利用标记给普通的文本添加语义、描述超文本内容，搭建网页的基本结构。</li>
<li><strong>语义化</strong><ul>
<li>HTML文件中，如果没有使用特殊语义的标记，也可以实现网页显示效果，但是利用标记给普通的文字添加了不同的语义，能够让网站的结构划分更加清晰。</li>
</ul>
</li>
<li><strong>语义化优势</strong><ul>
<li>方便代码的阅读和后期维护。</li>
<li>便于浏览器或是网络爬虫更好地解析网站内容。</li>
<li>使用语义化标签有利于SEO搜索引擎优化，提高网站的搜索排名。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>命名空间</title>
    <url>/2022/08/987d8a0698d5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>html元素表示整个网页文档，在开始标签上设置了命名空间xmlns属性</p>
<h3 id="不同版本的命名空间"><a href="#不同版本的命名空间" class="headerlink" title="不同版本的命名空间"></a>不同版本的命名空间</h3><h4 id="XHTML1-0版本"><a href="#XHTML1-0版本" class="headerlink" title="XHTML1.0版本"></a>XHTML1.0版本</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="HTML5版本"><a href="#HTML5版本" class="headerlink" title="HTML5版本"></a>HTML5版本</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="命名空间xmlns"><a href="#命名空间xmlns" class="headerlink" title="命名空间xmlns"></a>命名空间xmlns</h3><ul>
<li><strong>xml</strong>：可拓展标记语言，使用在传输过程中的规范。被设计用来传输和存储数据，是html的补充。</li>
<li><strong>xmlns</strong>：全称叫做XML NameSpace，NameSpace叫做命名空间，浏览器会将此命名空间用于该属性所在元素内的所有内容</li>
<li>html元素的命名空间规定了在不同用户的浏览器中标签语义遵循的统一标准，避免出现标签名冲突，这个标准使用的就是一个固定的网址<a href="http://www.w3.org/1999/xhtml%E4%B8%AD%E7%9A%84%E8%A7%84%E8%8C%83%E3%80%82">http://www.w3.org/1999/xhtml中的规范。</a></li>
</ul>
<h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><ul>
<li><p>xml:lang=”en”和lang=”en”表示所有的标签元素内容的语言都是英文，对搜索引擎和浏览器是有帮助的</p>
</li>
<li><p>lang=”zh-cn”表示中文（中国）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>video.js</title>
    <url>/2022/08/8762987745d8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="video-js概述"><a href="#video-js概述" class="headerlink" title="video.js概述"></a>video.js概述</h3><ul>
<li>video.js是一个通用的在网页上嵌入视频播放器的JS库。video.js旨在增强HTML5中的video元素，它的嵌入代码只是一个video元素。video.js将video元素包装在一个div中，该div用于放置控件和播放器所需的任何其他内容。</li>
<li>官网地址：<a href="https://videojs.com/">https://videojs.com/</a></li>
</ul>
<h3 id="video-js使用"><a href="#video-js使用" class="headerlink" title="video.js使用"></a>video.js使用</h3><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://vjs.zencdn.net/7.20.2/video-js.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- If you&#x27;d like to support IE8 (for Video.js versions prior to v7) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src=&quot;https://vjs.zencdn.net/ie8/1.1.2/videojs-ie8.min.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span></span></span><br><span class="line"><span class="tag">           <span class="attr">id</span>=<span class="string">&quot;my-video&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">class</span>=<span class="string">&quot;video-js&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">controls</span></span></span><br><span class="line"><span class="tag">           <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">width</span>=<span class="string">&quot;640&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">height</span>=<span class="string">&quot;264&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">poster</span>=<span class="string">&quot;MY_VIDEO_POSTER.jpg&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">data-setup</span>=<span class="string">&quot;&#123;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">           &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;MY_VIDEO.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;MY_VIDEO.webm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;vjs-no-js&quot;</span>&gt;</span></span><br><span class="line">            To view this video please enable JavaScript, and consider upgrading to a</span><br><span class="line">            web browser that</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://videojs.com/html5-video-support/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span><br><span class="line"><span class="tag">               &gt;</span>supports HTML5 video&lt;/a</span><br><span class="line">                &gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://vjs.zencdn.net/7.20.2/video.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> player = <span class="title function_">videojs</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.video-js&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install --save-dev video.js</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;my-video&quot;</span> <span class="attr">class</span>=<span class="string">&quot;video-js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> videojs <span class="keyword">from</span> <span class="string">&#x27;video.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;video.js/dist/video-js.css&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> player = <span class="title function_">videojs</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.video-js&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> player = <span class="title function_">videojs</span>(<span class="string">&#x27;my-video&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">autoplay</span>: <span class="string">&#x27;muted&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">player.<span class="title function_">autoplay</span>(<span class="string">&#x27;muted&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">videojs</span>(<span class="string">&#x27;my-video&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">autoplay</span>: <span class="literal">true</span>, <span class="comment">// 自动播放(如果video存在autoplay属性，则会被忽略)</span></span><br><span class="line">        <span class="comment">// false: 不会自动播放</span></span><br><span class="line">        <span class="comment">// true: 自动播放(受浏览器自动播放策略的限制)</span></span><br><span class="line">        <span class="comment">// &#x27;muted&#x27;: 将video元素静音，在加载启动时调用play()</span></span><br><span class="line">        <span class="comment">// &#x27;play&#x27;: 将在加载启动时调用play()，类似于浏览器自动播放</span></span><br><span class="line">        <span class="comment">// &#x27;any&#x27;: 在加载启动时调用play()，如果失败，会将video元素静音，然后调用play()</span></span><br><span class="line">    <span class="attr">controls</span>: <span class="literal">true</span>, <span class="comment">// 显示控件</span></span><br><span class="line">    <span class="attr">loop</span>: <span class="literal">false</span>, <span class="comment">// 循环</span></span><br><span class="line">    <span class="attr">muted</span>: <span class="literal">false</span>, <span class="comment">// 静音</span></span><br><span class="line">    <span class="attr">poster</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 封面</span></span><br><span class="line">    <span class="attr">width</span>: <span class="number">320</span>, <span class="comment">// 宽</span></span><br><span class="line">    <span class="attr">height</span>: <span class="number">180</span>, <span class="comment">// 高</span></span><br><span class="line">    <span class="attr">src</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 视频源URL</span></span><br><span class="line">    <span class="attr">preload</span>: <span class="string">&#x27;auto&#x27;</span>, <span class="comment">// 是否在加载video元素之后立即下载视频数据</span></span><br><span class="line">        <span class="comment">// &#x27;auto&#x27;: 立即加载视频数据(如果浏览器支持)</span></span><br><span class="line">        <span class="comment">// &#x27;metadata&#x27;: 只加载视频的meta数据，如duration、dimensions等</span></span><br><span class="line">        <span class="comment">// &#x27;none&#x27;: 不预加载任何数据</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>更多配置项请查看官方ApiDocs：<a href="https://videojs.com/guides/options/">Video.js Options Reference | Video.js (videojs.com)</a></p>
]]></content>
      <categories>
        <category>库</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>编辑器</title>
    <url>/2022/08/e9790d03d10e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="纯文本编辑器"><a href="#纯文本编辑器" class="headerlink" title="纯文本编辑器"></a>纯文本编辑器</h3><ul>
<li>所有的纯文本编辑器都能编辑HTML文件。例如记事本、Editplus、notepad等。</li>
<li>专门制作网页的软件有：sublime、WebStorm、HBuilder、VSCode等。</li>
</ul>
<h3 id="VS-code编辑器"><a href="#VS-code编辑器" class="headerlink" title="VS code编辑器"></a>VS code编辑器</h3><ul>
<li>推荐使用VS code软件，它是微软公司研发的一款非常方便使用的编辑器。</li>
<li>VS code拥有超级丰富的插件拓展，可以根据子的需求使用不用的插件，对于开发者来说更加友好。</li>
</ul>
<h3 id="插件拓展"><a href="#插件拓展" class="headerlink" title="插件拓展"></a>插件拓展</h3><p>打开VS code后，使用ctrl+shift+X打开拓展，这里推荐安装几个初期使用的插件</p>
<table>
<thead>
<tr>
<th>插件名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Chinese (Simplified) Language Pack for Visual Studio Code</td>
<td>使用中文界面</td>
</tr>
<tr>
<td>Auto Rename Tag</td>
<td>修改html标签，自动完成尾部闭合标签的同步修改</td>
</tr>
<tr>
<td>open in browser</td>
<td>右键设置在默认浏览器打开网页</td>
</tr>
<tr>
<td>Mithril Emmet</td>
<td>快速编写工具，已经集成在VS code中</td>
</tr>
</tbody></table>
<h3 id="VS-code使用步骤"><a href="#VS-code使用步骤" class="headerlink" title="VS code使用步骤"></a>VS code使用步骤</h3><ul>
<li>新建文件，crtl+N。</li>
<li>保存对应的文件格式ctrl+S，例如.html、.css、.js等文件。</li>
<li>使用对应的快捷键快速编写程序。</li>
</ul>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>!或html:5→tab/ctrl+E</td>
<td>自动生成基本骨架</td>
</tr>
<tr>
<td>标签名→tab</td>
<td>自动生成标签</td>
</tr>
<tr>
<td>标签名*n→tab</td>
<td>自动生成n个相同的标签</td>
</tr>
<tr>
<td>h$*6→tab</td>
<td>自动生成h1到h6的标签</td>
</tr>
<tr>
<td>ctrl+shift+D</td>
<td>复制光标所在行、复制所选内容</td>
</tr>
<tr>
<td>ctrl+shift+K/ctrl+X</td>
<td>删除光标所在行、所选内容</td>
</tr>
<tr>
<td>ctrl+shift+↑</td>
<td>将光标所在行上移一行</td>
</tr>
<tr>
<td>ctrl+shift+↓</td>
<td>将光标所在行下移一行</td>
</tr>
<tr>
<td>按住鼠标滚轮拖动</td>
<td>同时选中多个光标，同时操作</td>
</tr>
<tr>
<td>ctrl+滚轮</td>
<td>调整显示字号大小</td>
</tr>
<tr>
<td>ctrl+z</td>
<td>无限后退一步</td>
</tr>
<tr>
<td>ctrl+shift+z</td>
<td>无限还原一步</td>
</tr>
<tr>
<td>ctrl+enter</td>
<td>在任意位置直接换行</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>研发工具</category>
        <category>编辑器</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
